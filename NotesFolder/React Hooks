# UI layer and data layer work together means updating the DOM efficiently, DOM manipulation.
    - All the frameworks and libraries are trying to do so means if a list or something change then DOM updated 
        automatically.
    - In react we can do this by making a variable as a state. Whenever a state changes then react re-render the DOM automatically without reloading the whole page.
    - React always keep UI layer and Data layer in sync.
    - React makes DOM operations superfast.

# React-Hooks:
    - A hook is a normal javascript utility function given by react which has some pre-defined role.

# Two most important Hooks:
    - useState() - It is used to generate state variables in react.
    - useEffect() - function which gets automayically called after the component is rendered.

# Whenever a state variable changes react re-render our component (in layman's term refreshes our component or update of UI whenever state changes);


# When useState should be used?
    - When we want to change something in our UI on some action like onClick of a button, then normal JS variable cannot be used because it won't change the UI. Then, we should use useState to create a state because whenenver our state gets changed, react will re-render or refresh the component and we will see all the updated values.

# React is updating the const variable using useState. Isn't it conflicting with the concept of JS const variable?
    - As soon as, set function of useState is called react will re-render the component and create a new instance of the state variable with the new value instead of initial value.

# useEffect DEPENDENCY ARRAY:
    - if no dependency array - useEffect will be called at every render
    - if empty dependency array - [] - useEffect will be called at initial render only(only once)
    - if not empty dependency array - [dependency] - useEffect will be called whenever dependency gets updated

# useState BEHAVIOUR:
    - useState's purpose is used to create local state variable in our functional component
    - never use useState outside component, higher level
    - Always declare state on top of the component.
    - never create state variables inside if else()(condition, loops or functions) statement. It will create inconsistency in react and show unwanted behaviour


