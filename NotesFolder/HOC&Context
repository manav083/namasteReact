# What is HOC?

    - It is a javascript function which takes a component as input
    and returns a new enhanced component with some new modifications and changes.

# Controlled & Uncontrolled Components

    - The child component whose actions are controlled by parent component are controlled
    and whose actions are not controlled by parent component are called uncontrolled.

# Lifting the state Up

    - Updating the parent state from child component, read more about this from react docs....

# Props Drilling

    - Passing props from one parent to child and that child to its child and so on is called props
    drilling. Passing props is necessary and important but should avoid props drilling if there are many levels
    of child and we want to pass from top to bottom. Can be accomplished using "Context API". Read more from docs...

# Context Api

    - Suppose we want some data that needs to be accessed from anywhere in our app or in whole app like dark theme, login data. We cant use props in this scenario. So, we can do this using Context Api.

# Usage

    - first create a context using createContext provided by react library.
    like:
    const UserContext = createContext({
    loggedInUser: "Default User",
    })

    - We can use it by two ways: using hook(useContext) or by consumer method in class components.
    like const {loggedIn} = useContext(UserContext),
    like <UserContext.Consumer>
            {({loggedInUser}) => <h1>{loggedInUser}</h1>}
          </UserContext.Consumer>

    - Change the default value in context
        two ways: provider method, or pass setUserName and call it from any component and update it.

        By provider method, wrap your component in which you want some other value or different value and give the context state that value like:
        <UserContext.Provider value={{ loggedInUser: userInfo }}>
                <Component />
        </UserContext.Provider>

        or, pass setUserName i.e. a useState to change the state.
         <UserContext.Provider value={{ loggedInUser: userInfo, setUserName }}>
                <Component />
        </UserContext.Provider>
        access it anywhere in the app like loggedInUser and change the value.
